---
#
# DO NOT EDIT! MANAGED VIA github.com/hipagesgroup/repo-man
#

version: 2

references:
  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo

  save_repo: &save_repo
    save_cache:
      key: source-v1-{{ .Branch }}-{{ .Revision }}
      paths:
        - ".git"

  yarn_save_cache: &yarn_save_cache
    save_cache:
      paths:
        - node_modules
      key: v1-dependencies-{{ checksum "yarn.lock" }}

  yarn_restore_cache: &yarn_restore_cache
    restore_cache:
      keys:
        - v1-dependencies-{{ checksum "yarn.lock" }}
        - v1-dependencies-

  yarn_save_global_cache: &yarn_save_global_cache
    save_cache:
      paths:
        - .cache/yarn
      key: v1-yarn-global-cache-

  yarn_restore_global_cache: &yarn_restore_global_cache
    restore_cache:
      keys:
        - v1-yarn-global-cache-

  install_makefile: &install_makefile
    run:
      name: Download Makefile
      command: |
        curl -sSL -o Makefile.common https://${GITHUB_TOKEN}@raw.githubusercontent.com/hipagesgroup/repo-man/master/files/Makefile.common
        if [[ ! -f Makefile ]]; then echo "-include Makefile.common" > Makefile; fi

  install_k8s_tests: &install_k8s_tests
    run:
      name: Download k8s_tests
      command: |
        mkdir -p tests
        curl -sSL -o tests/k8s_tests.sky https://${GITHUB_TOKEN}@raw.githubusercontent.com/hipagesgroup/repo-man/master/files/k8s_tests.sky

  install_citools: &install_citools
    run: curl -sSL https://${GITHUB_TOKEN}@raw.githubusercontent.com/hipagesgroup/repo-man/master/files/ci-tools.sh | sudo -E bash

  install_semantic-release: &install_semantic-release
    run:
      name: Install semantic-release
      command: |
        yarn global add --prefer-offline --no-progress --non-interactive "semantic-release@15.5.0" "@semantic-release/exec@2.2.4"

  install_dockerlint: &install_dockerlint
    run:
      name: Install dockerlint
      command: |
        yarn global add --prefer-offline --no-progress --non-interactive "dockerlint@0.3.9"

  install_codeclimate: &install_codeclimate
    run:
      name: Setup Code Climate test-reporter
      command: |
        if [[ -z "$CC_TEST_REPORTER_ID" ]]; then
          echo "CC_TEST_REPORTER_ID is not set. (https://docs.codeclimate.com/docs/finding-your-test-coverage-token#section-regenerating-a-repos-test-reporter-id)"
          exit 1
        fi
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter

  run_semantic-release: &run_semantic-release
    run:
      name: Run semantic-release
      command: $(yarn global bin)/semantic-release

jobs:
  k8s_manifest_tests:
    docker:
      - image: circleci/php:7.1-node-browsers
    steps:
      - *restore_repo
      - checkout
      - *save_repo
      - *yarn_restore_global_cache
      - *install_dockerlint
      - *yarn_save_global_cache
      - *install_makefile
      - *install_k8s_tests
      - run: sudo apt-get update && sudo apt-get install -y python3-pkg-resources yamllint
      - run: sudo -E make tools/install-gomplate tools/install-kubetest tools/install-kubeval
      - run: make k8s/build k8s/lint
      - run:
          name: Split Kubernetes files
          command: |
            # Generate split files for kubetest
            # see: https://github.com/garethr/kubetest/issues/15
            find . -maxdepth 1 -name "kube-*.yml" -type f -print0 | xargs -0 -I% /bin/bash -c "grep -v '^#' % | csplit -f '%.part' -k -z - '/^---$/' '{*}'"
      - run:
          name: kubetest
          command: |
            find . -maxdepth 1 -name "kube-*.yml.part*" -type f -print0 | xargs -0 -r -t -n1 kubetest --verbose --tests tests
      - run:
          name: kubeval
          command: |
            { grep -l 'kind: Certificate' kube-*.yml.part* || true; } | xargs -r rm -f
            find . -maxdepth 1 -name "kube-*.yml.part" -type f -print0 | xargs -0 -I% -r -t -n1 /bin/bash -c "grep -v '^#' % | kubeval -v $KUBEVAL_KUBERNETES_VERSION"

  k8s_build_image:
    docker:
      - image: circleci/node:10.12
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f8:11:35:c2:1d:2d:5d:4d:df:0b:23:82:8b:35:d3:e6"
      - *restore_repo
      - checkout
      - *save_repo
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            #!/usr/bin/env bash

            set +o errexit    # always exit on error
            set +o pipefail   # dont ignore exit codes when piping output

            function build_docker_image(){
                echo "Building dockerfile at path $1"
                # Setup all docker args from local env vars
                docker_arg=$(grep -c ARG Dockerfile)
                build_args=""
                if [ "${docker_arg}" -gt 0 ]; then
                    echo "we need to add build-args"
                    echo "arg name needs to match env var name"

                    # Dockerfile ARG can be formatted in multiple ways, handling all edge cases
                    arg_keys=$(grep ARG Dockerfile | cut -d ' ' -f2 | cut -d ' ' -f1 | cut -d '=' -f1)

                    for arg_key in ${arg_keys}; do
                    build_args="${build_args} --build-arg ${arg_key}=\${${arg_key}}"
                    done
                fi
                echo "run docker build"
                eval "$(printf "docker build %s -t magic - < $1" "${build_args}")"
            }

            function publish_image(){
                echo "publishing image to docker hub repo $1"
                # Setup tags
                gitsha1=$(git rev-parse HEAD | cut -c1-7)

                docker_tags=("${gitsha1}" "${CIRCLE_BRANCH}" "${CIRCLE_TAG}")
                docker_tags+=("$(test ! -z "${CIRCLE_BRANCH}" && echo "branch.${CIRCLE_BRANCH}-${gitsha1}")")
                docker_tags+=("$(test ! -z "${CIRCLE_TAG}" && echo "tag.${CIRCLE_TAG}")")
                docker_tags+=("$(test ! -z "${CIRCLE_BUILD_NUM}" && echo "build.${CIRCLE_BUILD_NUM}")")
                docker_tags+=("$(test ! -z "${CIRCLE_USERNAME}" && echo "user.${CIRCLE_USERNAME}")")
                docker_tags+=("master.$([[ ${CIRCLE_BRANCH} == "master" ]] && echo "true" || echo "false")-${gitsha1}")

                registry_path="hipages/$1"

                for docker_tag in "${docker_tags[@]}"; do
                    docker tag magic "${registry_path}:${docker_tag}"
                    echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin docker push "${registry_path}:${docker_tag}"
                done
            }


            build_docker_image "./Dockerfile"
            publish_image "hyperkops"

  k8s_deploy:
    docker:
      - image: circleci/python:3.6.1
    environment:
      GIT_REPOSITORY_NAME: ${CIRCLE_PROJECT_REPONAME}
    steps:
      - *restore_repo
      - checkout
      - *save_repo
      - *install_makefile
      - run: sudo -E make tools/install-gomplate tools/install-pip-yq
      - run: make k8s/deploy
      - run:
          name: Notifying NewRelic
          command: |
            GIT_REPOSITORY_NAME=${CIRCLE_PROJECT_REPONAME}
            #!/usr/bin/env bash

            set -o errexit    # always exit on error
            set -o pipefail   # don't ignore exit codes when piping output

            echo "Notify NewRelic about deployment"

            if ! [ -x "$(command -v yq)" ]; then
                echo 'Error: yq is not installed.' >&2
                exit 1
            fi

            if [ -z "${NEWRELIC_LICENSE_KEY}" ]; then
                echo 'Error: Environment variable NEWRELIC_LICENSE_KEY is not set.' >&2
                exit 1
            fi

            if [ -z "${GIT_REPOSITORY_NAME}" ]; then
                echo 'Error: Environment variable GIT_REPOSITORY_NAME is not set.' >&2
                exit 1
            fi

            if [[ "$(git rev-parse --abbrev-ref HEAD)" == "master" ]]; then
                app_prefix="(PROD)"
            else
                app_prefix="(DEV)"
            fi

            repository=${GIT_REPOSITORY_NAME}
            author=$(git log -1 --pretty=format:"%an")
            description=$(git log -1 --oneline)
            revision=$(git log -1 --pretty=format:"%H")

            case "${repository}" in
                hip-new)
                    apps="$(yq -r '.www | .[] | keys | .[]' gomplate.yml | sed "s/^/${app_prefix} www-/") hip-admin homeimprovementpages.com.au"
                ;;
                hip-message-service)
                    apps="message-service"
                ;;
                hip-microapp-directory)
                    apps="directory-app"
                ;;
                image-service)
                    apps="image-service"
                ;;
                platform-search-service)
                    apps="search-service"
                ;;
                ntp)
                    apps="naturaltherapypages.com.au"
                ;;
                ntpuk)
                    apps="naturaltherapypages.co.uk"
                ;;
                ntpnz)
                    apps="naturaltherapypages.co.nz"
                ;;
                *)
                    apps="${repository}"
            esac

            for app in ${apps}; do
                echo "Notifying app '${app}' about deploy..."

                curl -s "https://api.newrelic.com/deployments.xml" \
                    -H "x-api-key:${NEWRELIC_LICENSE_KEY}" \
                    -d "deployment[app_name]=${app_prefix} ${app}" \
                    -d "deployment[user]=${author}" \
                    -d "deployment[description]=${description}" \
                    -d "deployment[revision]=${revision}"
            done

      - run:
          name: show deploy error
          command: |
            cat /tmp/k8s-actions-reponse.json
          when: on_fail

workflows:
  version: 2
  build-n-deploy:
    jobs:
      - k8s_build_image:
          context: org-global
      - k8s_manifest_tests:
          context: org-global
      - k8s_deploy:
          context: org-global
          requires:
            - k8s_build_image

